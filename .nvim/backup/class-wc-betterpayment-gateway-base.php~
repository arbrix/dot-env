<?php
/**
 * Better Payment API
 * Base for another BP gateways.
 *
 * @class        WC_BetterPayment_Gateway_Base
 * @extends        WC_Gateway
 */
if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly
}
if ( ! class_exists( 'WC_BetterPayment_Gateway_Base' ) ) :
	abstract class WC_BetterPayment_Gateway_Base extends WC_Payment_Gateway{
		protected $request_url  = 'https://api.betterpayment.de/rest/payment';
		protected $notify_url;
		protected $gateway_type = '';
		protected $api_settings;
		protected $msg          = array();

		public function __construct() {
			//get general settings
			foreach ( WC()->integrations->get_integrations() as $integration ) {
				if ( $integration instanceof WC_BetterPayment_Admin ) {
					$integration->init_settings();
					$this->api_settings = $integration->settings;
					break;
				}
			}
			// The title to be used for the vertical tabs that can be ordered top to bottom
			$this->title      = __( "Better Payment", 'woocommerce-betterpayment' );
			$this->notify_url = WC()->api_request_url( static::class );
			// Payment listener/API hook
			add_action( 'woocommerce_api_' . $this->id, [ $this, 'check_betterpaymen_response' ] );
			add_action( 'scheduled_subscription_payment_' . $this->id, array( $this, 'process_scheduled_subscription_payment'), 0, 3 );
			//init js parameters
			wp_register_script( 'betterpayment-core-ini', plugins_url( '/assets/js/core.ini.js', BETTERPAYMENT_PLUGIN_FILE ) );

			// Localize the script with new data
			$apiConfig = array(
				'api_key' => $this->api_settings['api_key'],
				'testmode' => (( 'yes' == $this->api_settings['test_mode'] ) ? 1 : 0)
			);
			wp_localize_script( 'betterpayment-core-ini', 'bp', $apiConfig );
		}

		public function init_form_fields() {
			$this->form_fields = array(
				'enabled'     => array(
					'title'   => __( 'Enable/Disable', 'woocommerce-betterpayment' ),
					'type'    => 'checkbox',
					'label'   => __( 'Enable Better Payment', 'woocommerce-betterpayment' ),
					'default' => 'yes'
				),
				'title'       => array(
					'title'       => __( 'Title', 'woocommerce-betterpayment' ),
					'type'        => 'text',
					'description' => __( 'This title will be shown to the user during checkout.',
						'woocommerce-betterpayment' ),
					'default'     => __( 'Better Payment', 'woocommerce-betterpayment' ),
					'desc_tip'    => true,
				),
				'description' => array(
					'title'   => __( 'Customer Message', 'woocommerce-betterpayment' ),
					'type'    => 'textarea',
					'default' => ''
				)
			);
		}

		/**
		 * Prepare request and get args for next payment's step
		 *
		 * @param $order_id
		 *
		 * @return array
		 */
		protected function call_api( WC_Order $order ) {
			// Add transaction-specific details to the request
			$order_details = array(
				'payment_type'       => $this->gateway_type,
				'api_key'            => $this->api_settings['api_key'],
				'shop_id'            => $this->api_settings['shop_id'],
				'order_id'           => $order->id,
				'merchant_reference' => 'Payment for Order ID: ' . $order->id . ' on ' . get_bloginfo( 'name' ),
				'total_amount'       => number_format( $order->order_total, 2 ),
				'shipping_costs'     => number_format( $order->order_shipping, 2 ),
				'currency'           => $order->order_currency,
				'postback_url'       => $this->notify_url,
				'customer_ip'        => $order->customer_ip_address,
				'customer_ip_proxy'  => $this->get_proxy_ip()
            );
            $is_renewal_order = false;
            if ( $this->is_subscription( $order ) ) {
                $order_details['recurring'] = 1;
                $orig_trans_id = $order->get_transaction_id();
                if ( "" !== $orig_trans_id ) {
                    $is_renewal_order = true;
                    //get init recurring payment order
                    //$parent_order = WC_Subscriptions_Renewal_Order::get_parent_order( $order );
                    //get recurring amount
                    $order_details['total_amount'] = WC_Subsctiptions_Order::get_recurring_total( $order );
                    $order_details['original_transaction_id'] = $orig_trans_id;
                }
            }
            if ( ! $is_renewal_order ) {
                $order_details += $this->get_specific_details( $order );
            }
			// Send request and get response from server
			$response = $this->get_api_response( $order_details );
			error_log( print_r( $response, true ) );

			return $response;
		}

		protected function get_proxy_ip() {
			$ipaddress = '';
			if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))
				$ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
			else if(isset($_SERVER['HTTP_X_FORWARDED']))
				$ipaddress = $_SERVER['HTTP_X_FORWARDED'];
			else if(isset($_SERVER['HTTP_FORWARDED_FOR']))
				$ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
			else if(isset($_SERVER['HTTP_FORWARDED']))
				$ipaddress = $_SERVER['HTTP_FORWARDED'];
			else if(isset($_SERVER['REMOTE_ADDR']))
				$ipaddress = $_SERVER['REMOTE_ADDR'];
			else
				$ipaddress = 'UNKNOWN';
			return $ipaddress;
		}

		/**
		 * Process request for additional params
		 *
		 * @return array
		 */
		protected function get_specific_details( WC_Order $order ) {
			return array();
		}

		protected function get_billing_details( WC_Order $order ) {
			$billing_block = array(
				'address'     => $order->billing_address_1,
				'address2'    => $order->billing_address_2,
				'city'        => $order->billing_city,
				'postal_code' => $order->billing_postcode,
				'state'       => $order->billing_state,
				'country'     => $order->billing_country,
				'first_name'  => $order->billing_first_name,
				'last_name'   => $order->billing_last_name,
				'email'       => $order->billing_email,
			    'phone'       => $order->billing_phone
			);
			return $billing_block;
		}

		protected function get_redirection_urls_details( WC_Order $order ) {
			$clientReturnUrl = $this->get_return_url( $order );
			return array(
				'success_url' => $clientReturnUrl,
				'error_url'   => $clientReturnUrl
			);
		}

		protected function get_bank_account_details( WC_Order $order ) {
			$keySet = array(
				array('iban', 'bic'),
				array('account_number','bank_code')
			);
			$useKey = 0;
			if (isset($_POST['betterpayment_dd_bank_format']) && $_POST['betterpayment_dd_bank_format'] == 'old'
				|| preg_match( '/^\d{8}$/', $_POST['betterpayment_dd-bic'] )) {
				$useKey = 1;
			}
			return array(
				$keySet[$useKey][0] => $_POST['betterpayment_dd-iban'],
				$keySet[$useKey][1] => $_POST['betterpayment_dd-bic'],
				'account_holder' => $_POST['betterpayment_dd-holder-name']
            );
		}

		/**
		 * Process the payment and return the result
		 **/
		public function process_payment( $order_id ) {
			$order = wc_get_order( $order_id );
			error_log( print_r( $_POST, true ) );
			if ( ! empty( $_POST[ $this->id . '_token'] ) ) {
				WC()->session->set(
					'bp-token',
					preg_replace( '/[^\da-f\-]*/', '', $_POST[ $this->id . '_token'] )
				);
			}
			// Send request and get response from server
			$response = $this->call_api( $order );
			// Check response
			if ( 0 == $response['error_code'] && 1 == $response['status_code'] ) {
				if ( 'redirect' == $response['client_action'] ) {
					// Return thank you redirect
					return array(
						'result'   => 'success',
						'redirect' => $response['action_data']['url'],
					);
				} else if ( 'postform' == $response['client_action'] ) {
					$session = WC()->session;
					$session->set( 'bp-url', $response['action_data']['url'] );
					$session->set( 'bp-fields', $response['action_data']['fields'] );
					return array(
						'result'   => 'success',
						'redirect' => $order->get_checkout_payment_url( true )
					);
				}
			} else if ( 0 == $response['error_code'] && true === $this->process_order_state($response) ) {
				return array(
					'result'   => 'success',
					'redirect' => $order->get_view_order_url()
				);
			} else {
				$this->process_error_response( $response, $order );
			}
		}

		protected function process_error_response( $response, WC_Order $order ) {
			if ( $response['error_code'] != 0 ) {
				// Other transaction error
				$order->add_order_note( __( 'Payment operation failed. Error: ',
						'woocommerce-betterpayment' ) . $response['error_message'] );
				wc_add_notice( __( 'An error occured. Please try another payment method.',
						'woocommerce-betterpayment' ),
					$notice_type = 'error' );
			} else if ( $response['status_code'] == 4 ) {
				// Decline
				$order->add_order_note( __( 'There has been an error with the transaction.',
					'woocommerce-betterpayment' ) );
				wc_add_notice( __( 'There has been an error with the transaction.', 'woocommerce-betterpayment' ),
					$notice_type = 'error' );
			} else {
				// No response or unexpected response
				$order->add_order_note( __( "Payment gateway did not respond or operation is in unsupported state.",
					'woocommerce-betterpayment' ) );
				wc_add_notice( __( 'No response from payment gateway server. Try again later or contact the site administrator.',
					'woocommerce-betterpayment' ),
					$notice_type = 'error' );
			}
		}

		/**
		 * Output for the order received page.
		 **/
		public function receipt_page( $order ) {
			echo '<p>' . __( 'Thank you - your order has been created, payment is still pending. You should be automatically redirected to your payment service.',
					'woocommerce-betterpayment' ) . '</p>';
			echo $this->generate_batterpayment_form( $order );
		}

		/**
		 * Generate the VoguePay Payment button link
		 **/
		public function generate_batterpayment_form( $order_id ) {
			$order    = wc_get_order( $order_id );
			$session = WC()->session;
			$form_field_set = array();
			foreach ( $session->get( 'bp-fields' ) as $key => $value ) {
				$form_field_set[]
					= '<input type="hidden" name="' . esc_attr( $key ) . '" value="' . esc_attr( $value ) . '" />';
			}
			wc_enqueue_js( '
				$.blockUI({
						message: "' . esc_js( __( 'Thank you - We are now redirecting you to the payment service to finish your purchase.',
					'woocommerce-betterpayment' ) ) . '",
						baseZ: 99999,
						overlayCSS:
						{
							background: "#fff",
							opacity: 0.6
						},
						css: {
							padding:        "20px",
							zindex:         "9999999",
							textAlign:      "center",
							color:          "#555",
							border:         "3px solid #aaa",
							backgroundColor:"#fff",
							cursor:         "wait",
							lineHeight:		"24px",
						}
					});
				jQuery("#betterpayment_redirect_form").submit();
			' );

			$bpUrl = $session->get( 'bp-url' );
			unset( $session->{'bp-url'} );
			unset( $session->{'bp-fields'} );
			return '<form action="' . esc_url( $bpUrl ) . '" method="post" id="betterpayment_redirect_form" target="_top">
					' . implode( '', $form_field_set ) . '
					<!-- Button Fallback -->
					<div class="payment_buttons">
						<input type="submit" class="button alt" id="submit_betterpayment_redirect_form" value="Make Payment" /> <a class="button cancel" href="' . esc_url( $order->get_cancel_order_url() ) . '">Cancel order &amp; restore cart</a>
					</div>
					<script type="text/javascript">
						jQuery(".payment_buttons").hide();
					</script>
				</form>';
		}

		/**
		 * Send the payment data to the gateway server and return the response.
		 */
		protected function get_api_response( $request ) {
			// Encode request
			$post     = http_build_query( $request, '', '&' );
			$key      = $this->api_settings['out_key'];
			$checkSum = sha1( $post . $key );
			$post .= '&checksum=' . $checkSum;
			$test = ( 'yes' == $this->api_settings['test_mode'] ) ? 'test' : '';
			$url  = 'https://' . $test . 'api.betterpayment.de/rest/payment';
			error_log( print_r( array('url' => $url, 'checksum' => $checkSum ) + $request, true ) );
			// Send request

			$content = wp_remote_post( $url, array(
				'body'        => $post,
				'timeout'     => 45,
				'redirection' => 5,
				'httpversion' => '1.1',
				'blocking'    => true,
				'headers'     => array(),
				'cookies'     => array(),
				'ssl_verify'  => false
			));
			error_log( print_r( $content, true ) );
			// Quit if it didn't work
			if ( is_wp_error( $content ) ) {
				wc_add_notice( __( 'Problem connecting to server at ',
						'woocommerce-betterpayment' ) . $url . ' ( ' . $content->get_error_message() . ' )',
					$notice_type = 'error' );

				return null;
			}

			// Convert response string to array
			return json_decode( $content['body'], true );
		}

		/**
		 * Check for valid betterpayment server callback
		 */
		public function check_betterpayment_response() {
			//verify server
			$notify_args = array(
				'transaction_id' => $_POST['transaction_id'],
				'status_code'    => $_POST['status_code'],
				'status'         => $_POST['status'],
				'order_id'       => $_POST['order_id'],
			);
			$notify_args += $this->get_specific_post();
			$checkSum = $_POST['checksum'];
			$post     = http_build_query( $notify_args, '', '&' );
			$key      = $this->api_settings['in_key'];
			if ( $checkSum != sha1( $post . $key ) ) {
				echo 'Checksum does not match!';
				exit;
			}
			$this->process_order_state($notify_args);
			exit;
		}

		protected function process_order_state(array $notify_args) {
			$message = '';
			if ( empty( $notify_args['order_id'] ) ) {
				$message = 'Order ID not set!';
			}
			if ( empty( $notify_args['status_code'] ) ) {
				$message = 'Status code not set!';
			}
			if ( '' !== $message) {
				error_log( print_r( array ( 'msg' => $message ) + $notify_args, true) );
				echo $message;
				return false;
			}
			// if status is finale - process order
			$order = wc_get_order( $notify_args['order_id'] );
			if ( 2 == $notify_args['status_code'] ) {
				$reason = __( 'The order has been accepted, but payment has to be confirmed manually by the merchant.', 'woocommerce-betterpayment' );
				$order->update_status( 'on-hold', $reason );
			} else if ( 3 == $notify_args['status_code'] ) {
				$order->add_order_note( __( 'Payment Received.<br />Your order is currently being processed.<br />We will be shipping your order to you soon.<br />Better Payment Transaction ID:',
						'woocommerce-betterpayment' ) . ' ' . $notify_args['transaction_id'],
					1 );
				$order->payment_complete( $notify_args['transaction_id'] );
			} else if ( in_array( $notify_args['status_code'], [ 5, 6 ] ) ) {
				$reason = __( "User has canceled the payment on the acquirer's website", 'woocommerce-betterpayment' );
				if ( 6 == $notify_args['status_code'] ) {
					$reason
						= __( 'The acquirer has declined the payment. Payments that require a risk check are marked as declined if the risk check fails', 'woocommerce-betterpayment' );
				}
				$order->cancel_order( $reason );
			} else {
				return false;
			}
			return true;
		}

		private function get_specific_post() {
			return array();
		}

        /**
         * Check whether an order is a subscription
         */
        private function is_subscription( $order ) {
            return class_exists( 'WC_Subscriptions_Order' ) && WC_Subscriptions_Order::order_contains_subscription( $order );
        }

        /**
         * Get the current user's login name
         */
        private function get_user_login() {
            global $user_login;
            get_currentuserinfo();
            return $user_login;
        }

		/**
		 * Get post data if set
		 */
		private function get_post( $name ) {
			if ( isset( $_POST[ $name ] ) ) {
				return $_POST[ $name ];
			}
			return null;
		}

	}
endif;
