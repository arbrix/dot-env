<?php
/**
 * Better Payment Card Gateway
 *
 * @class        WC_BetterPayment_Gateway_Card
 * @extends        WC_BetterPayment_Gateway_Base
 */
if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly
}
if ( ! class_exists( 'WC_BetterPayment_Gateway_Card' ) ) :
	if ( ! class_exists( 'WC_BetterPayment_Gateway_Base' ) ) {
		include 'class-wc-betterpayment-gateway-base.php';
	}

	class WC_BetterPayment_Gateway_Card extends WC_BetterPayment_Gateway_Base{
		// Setup our Gateway's id, description and other values
		public function __construct() {
			parent::__construct();
			// The global ID for this Payment method
			$this->id           = "betterpayment_cc";
			$this->gateway_type = 'cc';
			$this->notify_url   = WC()->api_request_url( self::class );
			// The Title shown on the top of the Payment Gateways Page next to all the other Payment Gateways
			$this->method_title = __( "Better Payment Credit Card", 'woocommerce-betterpayment' );
			// The description for this Payment Gateway, shown on the actual Payment options page on the backend
			$this->method_description = __( "Better Payment Gateway Plug-in for WooCommerce",
				'woocommerce-betterpayment' );
			// If you want to show an image next to the gateway's name on the frontend, enter a URL to an image.
			$this->icon = null;
			// Bool. Can be set to true if you want payment fields to show on the checkout
			// If doing a direct integration, which we are doing in this case
			$this->has_fields = true;
			// Supports the default credit card form
            $this->supports = array( 
                'default_credit_card_form',
                'products',
                'subscriptions',
                'subscription_cancellation', 
                'subscription_suspension', 
                'subscription_reactivation',
                'subscription_amount_changes',
                'subscription_date_changes'
            );
			// This basically defines your settings which are then loaded with init_settings ()
			$this->init_form_fields();
			// After init_settings () is called, you can get the settings and load them into variables, eg:
			// $this->title = $this->get_option ('title');
			$this->init_settings();
			// Turn these settings into variables we can use
			foreach ( $this->settings as $setting_key => $value ) {
				$this->$setting_key = $value;
			}
			// Save settings
			if ( is_admin() ) {// Versions over 2.0
				// Save our administration options. Since we are not going to be doing anything special
				// We have not defined 'process_admin_options' in this class so the method in the parent
				// Class will be used instead
				add_action( 'woocommerce_update_options_payment_gateways_' . $this->id,
					array( $this, 'process_admin_options' ) );
			}
			if ( is_checkout() ) {
				add_action( 'wp_enqueue_scripts', array( $this, 'register_scripts' ) );
			}
			add_action( 'woocommerce_receipt_' . $this->id, array( $this, 'receipt_page' ) );
		}

		public function init_form_fields() {
			$this->form_fields = array(
				'enabled'     => array(
					'title'   => __( 'Enable/Disable', 'woocommerce-betterpayment' ),
					'type'    => 'checkbox',
					'label'   => __( 'Enable Credit Card Payment', 'woocommerce-betterpayment' ),
					'default' => 'yes'
				),
				'title'       => array(
					'title'       => __( 'Title', 'woocommerce-betterpayment' ),
					'type'        => 'text',
					'description' => __( 'This controls the title which the user sees during checkout.',
						'woocommerce-betterpayment' ),
					'default'     => __( 'Credit Card', 'woocommerce-betterpayment' ),
					'desc_tip'    => true,
				),
				'description' => array(
					'title'   => __( 'Customer Message', 'woocommerce-betterpayment' ),
					'type'    => 'textarea',
					'default' => ''
				)
			);
		}

		public function register_scripts() {
			wp_deregister_script( 'wc-checkout' );
			wp_register_script( 'wc-checkout',
				plugins_url( '/assets/js/checkout.js', BETTERPAYMENT_PLUGIN_FILE ),
				array( 'jquery', 'woocommerce', 'wc-country-select', 'wc-address-i18n' ),
				null,
				true );
			wp_register_script( 'betterpayment-core',
				plugins_url( '/assets/js/core.js', BETTERPAYMENT_PLUGIN_FILE ),
				array( 'betterpayment-core-ini' ),
				null,
				true );
			wp_register_script( 'betterpayment-card',
				plugins_url( '/assets/js/card.js', BETTERPAYMENT_PLUGIN_FILE ),
				array( 'jquery', 'betterpayment-core', 'wc-checkout' ),
				null,
				true );
			wp_enqueue_script( 'betterpayment-card' );
		}

		protected function get_specific_details( WC_Order $order ) {
			$session = WC()->session;
			$token = $session->get( 'bp-token' );
			unset( $session->{'bp-token'} );
			return $this->get_billing_details( $order ) + $this->get_redirection_urls_details( $order ) + array(
				'original_transaction_id' => $token
			);
		}

		public function credit_card_form( $args = array(), $fields = array() ) {
			$default_args  = array(
				'fields_have_names' => true, // Some gateways like stripe don't need names as the form is tokenized
			);
			$args          = wp_parse_args( $args,
				apply_filters( 'woocommerce_credit_card_form_args', $default_args, $this->id ) );
			$month_options = '';
			for ( $i = 1; $i <= 12; $i ++ ) {
				$month_num  = str_pad( $i, 2, 0, STR_PAD_LEFT );
				$month_name = date( 'F', mktime( 0, 0, 0, $i, 1, 0 ) );
				$month_options .= '<option value="' . esc_attr( $i ) . '">' . $month_num . ' - ' . $month_name . '</option>';
			}
			$year_options = '';
			$year         = (int) date( 'Y' );
			$end_year     = intval( date( 'Y' ) ) + 10;
			do {
				$year_options .= '<option value="' . $year . '">' . $year . '</option>';
				$year ++;
			} while( $year < $end_year );
			$default_fields = array(
				'error_field'       => '<div id="upg-cc-error" class="validation-failed" style="display:none;padding:5px;margin:10px 20px;color:#a00"></div>',
				'currency-field'    => '<input data-upg-name="currency" type="hidden" class="remove-from-form" id="' . $this->id . '_currency" value="' . get_woocommerce_currency() . '" autocomplete="off">',
				'total-field'       => '<input data-upg-name="total" type="hidden" class="remove-from-form" id="' . $this->id . '_total" value="' . WC()->cart->total . '" autocomplete="off">',
				'token-field'       => '<input data-upg-name="token" type="hidden" id="betterpayment_cc_token" name="' . $this->id . '_token" value="">',
				'holder-name-field' => '<p class="form-row form-row-wide">
				<label for="' . esc_attr( $this->id ) . '-holder-name">' . __( 'Cardholder name',
						'woocommerce-betterpayment' ) . ' <span class="required">*</span></label>
				<input id="' . esc_attr( $this->id ) . '-holder-name" data-upg-name="holder" data-upg-validator="Holder" class="input-text wc-credit-card-form-holder-name validate-upg-holder remove-from-form" type="text" autocomplete="off" placeholder="' . __( 'Credit Card Holder',
						'woocommerce-betterpayment' ) . '" name="' . esc_attr( $this->id ) . '-holder-name" />
			</p>',
				'card-number-field' => '<p class="form-row form-row-wide">
				<label for="' . esc_attr( $this->id ) . '-card-number">' . __( 'Card number',
						'woocommerce-betterpayment' ) . ' <span class="required">*</span></label>
				<input id="' . esc_attr( $this->id ) . '-card-number" data-upg-name="number" data-upg-validator="Number" class="input-text wc-credit-card-form-card-number validate-upg-cardnumber remove-from-form" type="text" maxlength="20" autocomplete="off" placeholder="•••• •••• •••• ••••" name="'
						. esc_attr( $this->id ) . '-card-number" />
			</p>',
				'card-expiry-field' => '<p class="form-row form-row-wide">
				<label for="' . esc_attr( $this->id ) . '-card-expiry">' . __( 'Expiry date',
						'woocommerce-betterpayment' ) . ' <span class="required">*</span></label>
				<div id="' . esc_attr( $this->id ) . '-card-expiry">
					<select data-upg-name="expiry_month" data-upg-validator="ExpMonth" name="' . esc_attr( $this->id ) . '-card-expiry-month"  class="month validate-upg-exp-month remove-from-form">
						<option value="" selected="selected">' . __( 'Month', 'woocommerce-betterpayment' ) . '</option>
						' . $month_options . '
					</select>
					<select data-upg-name="expiry_year" data-upg-validator="ExpYear" name="' . esc_attr( $this->id ) . '-card-expiry-year" class="year validate-upg-exp-year remove-from-form">
						<option value="" selected="selected">' . __( 'Year', 'woocommerce-betterpayment' ) . '</option>
						' . $year_options . '
					</select>
				</div>
			</p>',
				'card-cvv-field'    => '<p class="form-row form-row-wide">
				<label for="' . esc_attr( $this->id ) . '-card-cvv">' . __( 'Security code (CVV)',
						'woocommerce-betterpayment' ) . ' <span class="required">*</span></label>
				<input id="' . esc_attr( $this->id ) . '-card-cvv" data-upg-name="cvv" data-upg-validator="Cvv" class="input-text wc-credit-card-form-card-cvc validate-upg-cardnumber remove-from-form" type="text" autocomplete="off" placeholder="•••" name="' . esc_attr( $this->id ) . '-card-cvv" />
			</p>'
			);
			$fields         = wp_parse_args( $fields,
				apply_filters( 'woocommerce_credit_card_form_fields', $default_fields, $this->id ) );
			?>
			<script type="text/javascript">
				//<![CDATA[
				var validationCcMessageSet = {
					'holder': '<?php echo __('Please enter cardholder name', 'woocommerce-betterpayment'); ?>',
					'number': '<?php echo __('Please enter card number', 'woocommerce-betterpayment'); ?>',
					'number_check': '<?php echo __('Please enter a valid card number', 'woocommerce-betterpayment'); ?>',
					'expiry_date': '<?php echo __('Please enter expiration date', 'woocommerce-betterpayment'); ?>',
					'expiry_date_past': '<?php echo __('Expiration date of credit card empty or has ended', 'woocommerce-betterpayment'); ?>',
					'cvv': '<?php echo __('Please enter security code', 'woocommerce-betterpayment'); ?>',
					'cvv_check': '<?php echo __('Please enter a valid security code', 'woocommerce-betterpayment'); ?>',
					'response': '<?php echo __('Your credit card could not be processed', 'woocommerce-betterpayment'); ?>'
				};
				//]]>
			</script>
			<fieldset id="<?php echo $this->id; ?>_form">
				<?php do_action( 'woocommerce_credit_card_form_start', $this->id ); ?>
				<?php
				foreach ( $fields as $field ) {
					echo $field;
				}
				?>
				<?php do_action( 'woocommerce_credit_card_form_end', $this->id ); ?>
				<div class="clear"></div>
			</fieldset>
			<?php
		}
	}
endif;
